# Exports
export ANDROID_HOME=~/Library/Android/sdk
export PATH=$(pyenv root)/shims:$HOME/bin:/usr/local/bin:$PATH
export PATH=/opt/loggi/ops/ansible/bin:$(yarn global bin):$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin
export ZSH=~/.oh-my-zsh
export EDITOR=nvim
export NVM_DIR="$HOME/.nvm"
. "$(brew --prefix nvm)/nvm.sh"
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# pyenv virtualenv
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Oh My ZSH
ZSH_THEME="amuse"
plugins=(git z tmux nvm docker adb zsh_reload)
source $ZSH/oh-my-zsh.sh
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=cyan'

# Aliases
alias nculoggi='ncu -u -f /@loggi/'
alias gbr='git branch | grep -v "master" | xargs git branch -D'
alias ctags="`brew --prefix`/bin/ctags"
alias fml='rm -rf node_modules && npm install'
alias nba='react-native run-android'
alias nbi='react-native run-ios'
alias nreset='watchman watch-del-all && npm run start'
alias rshake='adb shell input keyevent 82'
alias rreload='adb shell input keyevent 82 && adb shell input keyevent 19 && adb shell input keyevent 23'

function adbtext {
  adb shell input text "$1" && adb shell input keyevent ENTER;
}

function dcleanup {
  docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

function adbpic {
  adb shell screencap -p /sdcard/screen.png
  adb pull /sdcard/screen.png
  adb shell rm /sdcard/screen.png
}

function dpull {
  docker images | grep -v REPOSITORY | awk '{print $1}' | xargs -L1 docker pull
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# begin appcenter completion
. <(appcenter --completion)
# end appcenter completion

USER=$USERNAME
[ -s "/Users/${USER}/.scm_breeze/scm_breeze.sh" ] && source "/Users/${USER}/.scm_breeze/scm_breeze.sh"

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###
